@techreport{cxx11_standard,
    author = {{The C++ Standards Committee}},                               
    title =  {{ISO International Standard ISO/IEC 14882:2011, Programming Language C++}},
    year = 2011,                                                            
    note = {http://www.open-std.org/jtc1/sc22/wg21},                        
    institution = {{Geneva, Switzerland: International Organization for Standardization (ISO).}},                                                     
}

@techreport{cxx14_standard,                                                 
    author = {{The C++ Standards Committee}},                               
    title =  {{ISO International Standard ISO/IEC 14882:2014, Programming Language C++}},
    year = 2014,                                                            
    note = {http://www.open-std.org/jtc1/sc22/wg21},                        
    institution = {{Geneva, Switzerland: International Organization for Standardization (ISO).}},                                                     
}                                                                           
@techreport{cxx17_standard,                                                 
    author = {{The C++ Standards Committee}},                               
    title =  {{ISO International Standard ISO/IEC 14882:2017, Programming Language C++}},
    year = 2017,                                                            
    note = {http://www.open-std.org/jtc1/sc22/wg21},                        
    institution = {{Geneva, Switzerland: International Organization for Standardization (ISO).}},                                                     
}  

@techreport{cxx20_standard,                                                 
    author = {{The C++ Standards Committee}},                               
    title =  {{ISO International Standard ISO/IEC 14882:2020, Programming Language C++}},
    year = 2020,                        
    institution = {{Geneva, Switzerland: International Organization for Standardization (ISO).}},                                 
}

@article{10.5555/1352079.1352134,
author = {Pheatt, Chuck},
title = {Intel® Threading Building Blocks},
year = {2008},
issue_date = {April 2008},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {23},
number = {4},
issn = {1937-4771},
abstract = {Intel® Threading Building Blocks [1] is a C++ runtime library that abstracts the low-level
threading details necessary for effectively utilizing multi-core processors. It uses
C++ templates to eliminate the need to create and manage threads. Applications tend
to be more portable since parallelism is achieved through library calls and utilization
of a task manager for scheduling. The task manager analyzes the system the software
is running on, chooses the optimal number of threads, and performs load balancing
that spreads out the work evenly across all processor cores. The library consists
of data structures and algorithms that simplify parallel programming in C++ by avoiding
requiring a programmer to use native threading packages such as POSIX threads or Windows
threads, or even the portable Boost Threads.},
journal = {J. Comput. Sci. Coll.},
month = apr,
pages = {298},
numpages = {1}
}

@article{dagum1998openmp,
    Author = {Dagum, Leonardo and Menon, Ramesh},
    Date-Added = {2014-07-24 11:13:01 +0000},
    Date-Modified = {2014-07-24 11:13:01 +0000},
    Journal = {Computational Science \& Engineering, IEEE},
    Number = {1},
    Pages = {46--55},
    Publisher = {IEEE},
    Title = {OpenMP: an industry standard API for shared-memory programming},
    Volume = {5},
    Year = {1998}}
    
@article{kaiser2020hpx,
  title={{Hpx-the c++ standard library for parallelism and concurrency}},
  author={Kaiser, Hartmut and Diehl, Patrick and Lemoine, Adrian S and Lelbach, Bryce Adelstein and Amini, Parsa and Berge, Agust{\'\i}n and Biddiscombe, John and Brandt, Steven R and Gupta, Nikunj and Heller, Thomas and others},
  journal={Journal of Open Source Software},
  volume={5},
  number={53},
  pages={2352},
  year={2020}
}

@article{jha2021nlmech,
  title={NLMech: Implementation of finite difference/meshfree discretization of nonlocal fracture models},
  author={Jha, Prashant K and Diehl, Patrick},
  journal={Journal of Open Source Software},
  volume={6},
  number={65},
  pages={3020},
  year={2021}
}

@article{diehl2020asynchronous,
  title={An asynchronous and task-based implementation of peridynamics utilizing HPX—the C++ standard library for parallelism and concurrency},
  author={Diehl, Patrick and Jha, Prashant K and Kaiser, Hartmut and Lipton, Robert and L{\'e}vesque, Martin},
  journal={SN Applied Sciences},
  volume={2},
  number={12},
  pages={1--21},
  year={2020},
  publisher={Springer}
}

@article{10.1093/mnras/stab937,
    author = {Marcello, Dominic C and Shiber, Sagiv and De Marco, Orsola and Frank, Juhan and Clayton, Geoffrey C and Motl, Patrick M and Diehl, Patrick and Kaiser, Hartmut},
    title = "{octo-tiger: a new, 3D hydrodynamic code for stellar mergers that uses hpx parallelization}",
    journal = {Monthly Notices of the Royal Astronomical Society},
    volume = {504},
    number = {4},
    pages = {5345-5382},
    year = {2021},
    month = {04},
    abstract = "{octo-tiger is an astrophysics code to simulate the evolution of self-gravitating and rotating systems of arbitrary geometry based on the fast multipole method, using adaptive mesh refinement. octo-tiger is currently optimized to simulate the merger of well-resolved stars that can be approximated by barotropic structures, such as white dwarfs (WDs) or main-sequence stars. The gravity solver conserves angular momentum to machine precision, thanks to a ‘correction’ algorithm. This code uses hpx parallelization, allowing the overlap of work and communication and leading to excellent scaling properties, allowing for the computation of large problems in reasonable wall-clock times. In this paper, we investigate the code performance and precision by running benchmarking tests. These include simple problems, such as the Sod shock tube, as well as sophisticated, full, WD binary simulations. Results are compared to analytical solutions, when known, and to other grid-based codes such as flash. We also compute the interaction between two WDs from the early mass transfer through to the merger and compare with past simulations of similar systems. We measure octo-tiger’s scaling properties up to a core count of ∼80 000, showing excellent performance for large problems. Finally, we outline the current and planned areas of development aimed at tackling a number of physical phenomena connected to observations of transients.}",
    issn = {0035-8711},
    doi = {10.1093/mnras/stab937},
    url = {https://doi.org/10.1093/mnras/stab937},
    eprint = {https://academic.oup.com/mnras/article-pdf/504/4/5345/37975469/stab937.pdf},
}